<?php

namespace App\Providers;

use App\Rabbitmq\Rabbit\Client;
use App\Rabbitmq\Rabbit\MessageDispatcher;
use Illuminate\Support\ServiceProvider;
use PhpAmqpLib\Connection\AMQPStreamConnection;

class RabbitServiceProvider extends ServiceProvider
{
    /**
     * @return void
     */
    public function register()
    {
        $this->app->singleton(AMQPStreamConnection::class, function () {
            return new AMQPStreamConnection(
                config('amqp.host'),
                config('amqp.port'),
                config('amqp.username'),
                config('amqp.password'),
                config('amqp.vhost'),
                config('amqp.insist'),
                config('amqp.login_method'),
                config('amqp.login_response'),
                config('amqp.locale'),
                config('amqp.connection_timeout'),
                config('amqp.read_and_write_timeout'),
                config('amqp.context'),
                config('amqp.keepalive'),
                config('amqp.heartbeat'),
                config('amqp.channel_rpc_timeout'),
            );
        });

        $this->app->bind('amqp', function () {
            return new AMQPStreamConnection(
                config('amqp.host'),
                config('amqp.port'),
                config('amqp.username'),
                config('amqp.password'),
                config('amqp.vhost'),
                config('amqp.insist'),
                config('amqp.login_method'),
                config('amqp.login_response'),
                config('amqp.locale'),
                config('amqp.connection_timeout'),
                config('amqp.read_and_write_timeout'),
                config('amqp.context'),
                config('amqp.keepalive'),
                config('amqp.heartbeat'),
                config('amqp.channel_rpc_timeout'),
            );
        });

        $this->app->bind('rabbitmq.dispatcher', MessageDispatcher::class);

        $this->app->singleton(Client::class, function ($app) {
            $client = new Client($app->make(AMQPStreamConnection::class));

            return $client
                ->addQueues(['queue-one', 'queue-two'])
                ->setDefaultQueue('queue-one')
                ->setColumn('name')
                ->setGuard('web') // if not provided, default guard will be used
                ->setUser('admin') // remote auth user name
                ->disableMultiQueue()
                // authentication is disabled by default
                // ->disableAuthentication()
                ->enableAuthentication()
                ->init();
        });
    }
}